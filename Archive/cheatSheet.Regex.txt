RegEx Cheatsheet

Regular Expressions Fast Start Examples for Finding Strings (quotes are not required)
    "hello" - matches the word hello
    "[hH]ello" - matches hello or Hello
"hello|goodbye" = matches hello or goodbye
    "\$[0-9]" matches $0, $1, $2, ...$9
    "^print" matches the word print at the start of a line
    "Fred|Wilma|Barney|Betty" will match on any of the four words (or condition)

Regex Examples for Substituting Strings using backreferencing
    use '%s/<old>/<new>/g' to substitute an old string for a new string.
        The leading '%' means all lines, 'g' means all occurances on a line
    %s/^\(... \)/\1,/g - vi format for suffixing a comma to lines starting with three chars and a space
    The general format is to surround the field to be subsituted using ()'s (escaped with \)
    Then reference the enclosed expression as \1, \2 etc in the substitute clause
    The same regex substitutions work in perl, except $ notation is used to denote a variable
    perl -pe 's/^(... \)/${1},/g

Regular Expressions Usage
    Regular expressions are supported in awk, sed, perl, java, grep, ed, emacs and bash

Website Tutorials, Whitepapers, References and Expression Libraries
    http://www.regexlib.com
    http://etext.virginia.edu/services/helpsheets/unix/regex.html
    https://www.debuggex.com/

Escaped Character Matches
    \.  Match a literal 'dot' (dots are normally interpreted as 'any character')
    \a  Match alarm (bell, beep, etc)
    \b  Match a boundary between a word and a non-work
    \d  Match digit character ( same as [0-9] )
    \e  Match escape
    \D  Match non-digit character
    \f  Match formfeed
    \n  Match newline
    \r  Match return
    \t  Match tab
    \s  Match whitespace character (same as class [\n\t\f\r]
    \S  Match non-whitespace character
    \w  Match "word" character ( i.e. the class of all alphanumerics plus "_" or [A-Za-z0-9_] )
    \W  Match non-word character
    \021  Match octal char ( in this case 21 octal)
    \xf0  Match hex char ( in this case f0 hexidecimal)

Matching Characters
    '.' Single character pattern match (except a newline \n) and Single Character Repeating Matches:
    The dot "." pattern matches any character except the newline "\n"
    "a.[0-9]": matches a string that has an 'a' followed by one character and a digit;
    "^.{3}$": a string with exactly 3 characters on the line - useful for positional matches.
        Note that in vi, the { and } characters must be escaped like "^.\{3\}$" to work
    A single character repeating can also be specified using back-referencing
        /(.)\1\1\1\1\1\1/ will look for the same character repeated 6 times (any character)

Characters Literals Match
    [abc] a, b, or c (simple class)
    [^abc] Any character except a, b, or c (negation)
    [a-zA-Z] a through z or A through Z, inclusive (range)
    [a-d[m-p]] a through d, or m through p: [a-dm-p] (union)
    [a-z&&[def]] d, e, or f (intersection)
    [a-z&&[^bc]] a through z, except for b and c: [ad-z] (subtraction)
    [a-z&&[^m-p]] a through z, and not m through p: [a-lq-z](subtraction)

Classes
    [:upper:] [A-Z] uppercase letters
    [:lower:] [a-z] lowercase letters
    [:alpha:] [A-Za-z] upper- and lowercase letters
    [:alnum:] [A-Za-z0-9] digits, upper- and lowercase letters
    [:digit:] [0-9] digits
    [:xdigit:] [0-9A-Fa-f] hexadecimal digits
    [:punct:] [.,!?:...] punctuation
    [:blank:] [ \t] space and TAB
    [:space:] [ \t\n\r\f\v] blank characters
    [:cntrl:]  control characters
    [:graph:] [^ \t\n\r\f\v] printed characters
    [:print:] [^\t\n\r\f\v] printed characters and space

Boundaries
    '^' and '$' - match start and end of string
    "^The": matches any string that starts with "The";
    "of despair$": matches a string that ends in the substring "of despair";
    "^abc$": a string that starts and ends with "abc" -- that could only be "abc" itself!
    "notice": a string that has the text "notice" in it
    \b A word boundary - a point bounded by a \w and \W character on either side
    \B Not a word boundary
    \A The beginning of a string
    \G The end of the previous match
    \Z The end of the input but for the final terminator, if any
    \z The end of the input

Repeating ( or Multiplier ) Character Modifiers
    '*', '+', and '? "zero or more", "one or more", and "zero or one" (same as {0,}, {1,) and {0,1} respectively
        In VIM escape * + ? with \
    "ab*": matches a string that has an a followed by zero or more b's ("a", "ab", "abbb", etc.);
    "ab+": same, but there's at least one b ("ab", "abbb", etc.);
    "ab?": there might be a b or not;
"   a?b+$": a possible a followed by one or more b's ending a string.

{} Bounds (General Multipliers)(note that {} chars must be escaped in vi)
    "ab{2}": matches a string that has an a followed by exactly two b's ("abb");
    "ab{2,}": there are at least two b's ("abb", "abbbb", etc.);
    "ab{3,5}": from three to five b's ("abbb", "abbbb", or "abbbbb").
    "{0,}", "{1,}", and "{0,1}" do '*', '+' and '?' respectively

() Sequences and Remembered Patterns (Backreferences)
    "a(bc)*": matches a string that has an 'a' followed by zero or more copies of the sequence "bc";
    "a(bc){1,5}": one through five copies of "bc."
    Enclosing patterns with () remembers the values for reuse with \1, \2, \3 references
        e.g. /ab(-)cd\1ef/ is equivalent to /ab-cd-ef/
    Backreferencing can be turned of with the prefix ?: inside parentheses (e.g. /ab(?:-)cd/

Conditional '|' OR operator (aka Alternation):
    "hi|hello": matches a string that has either "hi" or "hello" in it;
    "(b|cd)ef": a string that has either "bef" or "cdef";
    "(a|b)*c": a string that has a sequence of alternating a's and b's ending in a c;
    Alternation for single characters is better accomplished with classes ( e.g [abc] is the same as a|b|c )

Lazy "?" Modifier
    "?" is used to discourage greedy matching with multipliers - the fewest characters are matched
    e.g. /ab*c/ would match "axxx b yyy b c" by matching the first or last b - the ? modifier forces the first
        So, /ab*?c/ would match the first b in the string and not the second (which would be the default)

Grouping and Classes
    '[ ]' defines a set or class or collection of values where any member of the collection can match
        '[ ]' and ^ define allowed/disallowed characters in a single position, so [^aeiouAEIOU] is a negated class of vowels
    "[ab]": matches a string that has either an a or a b (that's the same as "a|b");
    "[a-d]": a string that has lowercase letters 'a' through 'd' (that's equal to "a|b|c|d" and even "[abcd]");
    "^[a-zA-Z]": a string that starts with a letter;
    "[0-9]%": a string that has a single digit before a percent sign;
    ",[a-zA-Z0-9]$": a string that ends in a comma followed by an alphanumeric character.
    "%[^a-zA-Z]%" matches a string with a character that is not a letter between two percent signs).

'\' Escape for "^.[$()|*+?{\"
    "(\$|¥)[0-9]+" would have the function call: ereg("(\\$|¥)[0-9]+", $str) (what string does that validate?)
    bracket expressions are an exception - all special characters, including the backslash ('\'), lose their special powers
        (i.e., "[*\+?{}.]" matches exactly any of the characters inside the brackets).

Precedence (in order highest to lowest)
    Parentheses ( ) (?: )
    Multipliers ? + * {m,n} ?? +? *? {m,n}?
    Sequence and anchoring abc ^ $ \A \Z (?= ) (?! )
    Alternation |

Regular Expressions Library ( go to http://regexlib.com )
    Money ^\$?([1-9]{1}[\d]{0,2}(\,[\d]{3})*(\.[\d]{0,2})?|[1-9]{1}[\d]{0,}(\.[\d]{0,2})?|0(\.[\d]{0,2})?|(\.[\d]{1,2})?)$
    Money Strings ^\$?([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(\.[0-9]{1,2})?$
    Email addresses ^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*$
    Mixed case ~ m/(B|b)ill (C|c)linton/)
    IP Address \b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b
    Floating point number [-+]?([0-9]*\.)?[0-9]+
    Floating point number with exponent ^[-+]?([0-9]*\.)?[0-9]+$
    URL parameter [\?&]value=
    Signed Integer (\+|-)?[1-9][0-9]*
    DOS file path and file name [A-Za-z]:(\\[A-Z0-9_]+)+
    DOS file path (java version) ^[A-Za-z]:(\\\\[A-Za-z0-9]*)* - note the \\\\ translates to \\ in the regular expression which an escaped '\'
    DOS file path or UNC ^(([a-zA-Z]:|\\)\\)?(((\.)|(\.\.)|([^\\/:\*\?"\|<>\. ](([^\\/:\*\?"\|<>\. ])|([^\\/:\*\?"\|<>]*[^\\/:\*\?"\|<>\. ]))?))\\)*[^\\/:\*\?"\|<>\. ](([^\\/:\*\?"\|<>\. ])|([^\\/:\*\?"\|<>]*[^\\/:\*\?"\|<>\. ]))?$
    Letters of Unicode {^[[:alpha:]]+$}
    Domain Name ^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)?$
    Text Files ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(txt|TXT)$
    Social Security Number ^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))

Websites
    Open Group Regular Expression Guidelines: http://www.opengroup.org/onlinepubs/007908799/xbd/re.html

