C and C++ CheatSheet

History of Versions
    1990 ANSI
    1999 C99
    2011 C11
    2017 C17

Resources and References
    http://lib.daemon.am/Books/C++/ - Sams Teach Yourself C++ in 21 Days
    http://lib.daemon.am/Books/C/ - Sams Teach Yourself C in 21 Days
    http://www.gnu.org/software/libc/manual/ - GNU C Library
    https://www.youtube.com/user/mycodeschool -- My Code School

Integrated Development Environments
    In Linux, the Anjuta IDE is a C and C++ tool shipped standard with Suse Linux 
        The path to Anjuta on the graphical desktop is Development/Integrated Environment/Anjuta IDE
    In Linux and Windows, NetBeans supports C and C++
    http://www.tutorialspoint.com/codingground.htm -- online compilers
    https://ideone.com/
    https://repl.it/
    http://codepad.org/
    http://www.bloodshed.net/dev/devcpp.html - Dev-Cpp installable IDE for C/C++
    http://www.codeblocks.org/downloads/26 -- Code Blocks installable IDE for C/C++
    https://www.eclipse.org/cdt/ -- Eclipse C/C++ Development Tooling
    https://netbeans.org/features/cpp/ -- Netbeans C/C++ Development
    https://ide.cs50.io -- Harvard CS50 Teaching IDE
    http://www.smorgasbordet.com/pellesc/ -- Pelles C IDE and Tookit for Windows Dev

Built-ins
    puts - put a string to the console

Libraries
    libc --- the standard library

Warnings and Tricks
    Do not modify a string literal, only modify arrays (otherwise ... core dump)
    Use strcmp() and don't test for string equality using '==' which compares pointer addresses
    Don't strcat onto an uninitialized array - strcpy into it or initialize it before using it
    Don't do cumulative strcat's in recursive functions
    Pass an array to a function by array name only, so also pass the primary length(s) as another parameter(s)
    Arrays can be initialized but are not modifiable lvalues and cannot be used in assignments (use strcpy)
    scanf ignores leading whitespace characters so entering a leading '\n' is ignored
    Don't specify '%[...]s' in scanf for  string, use '%[...]' instead
    Use -lm linker option for math.h functions
    Always initialize a pointer (to NULL or otherwise)
    Heap memory is global

Updating Repositories in Ubuntu using APT (Advanced Packaging Tool)
    sudo apt-get update -- update the package database list from all external repositories
    sudo apt-get upgrade -- upgrade all installed packages with newer versions
    sudo apt-get upgrade <package-name1> <package-name2> to upgrade named packages only
    sudo apt-get dist-upgrade -- upgrades installed packages and package dependencies
    sudo apt-get update && sudo apt-get upgrade -y -- update the repository then install the newer versions
    sudo apt-get install <package-name1> <package-name2> ... -- installs named packages not already installed
    sudo apt-get install update
    sudo apt-get install build-essential -- for gcc, gdb and other dev tools
    sudo apt-get remove <package_name1> <package_name2> ... -- removes named packages but not the related configuration files
    sudo apt-get purge < package_name1> <package_name2> ... -- removes named packages and their configuration files
    sudo apt-cache pkgnames <pckge search term> -- searches for existing package names based on partial search term
    sudo apt-cache search <search term> -- searches package names and descriptions

Debugging with GDB
    http://www.gnu.org/software/gdb/documentation/ -- GNU reference
    b <lineno> or breakpoint <lineNo> -- set a breakpoint at a line
    b <lineno> if <expr) -- conditional breakpoint (e.g. b 20 if i>10)
    b main or breakpoint main -- set a breakpoint at main
    b <functionName> -- set a breakpoint on a function
    bt or backtrace -- show function call history to current point
    clear <lineNo> -- clear breakpoint
    c or continue -- run to next break or watch
    <Ctrl>-u -- undo characters at command line
    delete <lineNo> -- delete a breakpoint or watchpoint at line number
    d <lineNum> or disable <lineNum> -- disable breakpoint at line number
    e or enable -- enable breakpoint at line number
    <enter> -- repeat last command
    file <filename> -- load a file for debugging
    frame -- show he current stack frame
    gdb <program_name> to start gdb
    info locals -- show local variables
    info w -- show current watchpoints
    info b -- show current breakpoints
    l <linNum> or list <lineNum> -- list 10 lines around line num
    l <from> <to>  -- list code in a range of line numbers
    n or next -- run the current code line (step over library functions)
    p <var> or print <var> -- print the value of <var>
    q or quit -- end the debug session
    r or run or restart -- run/debug program or restart current session
    set <var> = <val> -- set a variable to a value
    start -- set a breakpoint at main and submit 'run'
    s or step -- run the current code line (step into library functions)
    w <var> or watch <var> -- set a watch on a variable
    x/<num>b -- examine num bytes of memory
    x/<num>i -- examine num instructions
    x/<num>s -- examine num strings
    x/<num>xh -- examine num halfwords

Debugging CGI with GDB
    Add sleep(60) to the code at the first breakpoint
    Run it
    Get the PID ps ax | grep <exe file name>
    Attach gdb sudo gdb -p PID
    Attach gdb to running process: sudo gdb --pid=PID
    Continue stepping from the sleep()
    Always include header in CGI as printf("Content-Type: text/html\n\n") whether printing or not
    Find ubuntu logs for Apache at /var/log/apache2/error.log and /var/log/apache2/access.log
    info registers -- show contents of all registers
    info registers eax -- show contents of eax register

Coredump(in Linux)
    ulimit -c unlimited -- to set the size of the coredump file to unlimited
    gdb <prgram> core -- to run gdb to the point of failure

Hex Editor
    ghex (install in Linux) -- uses GUI and allows editing of a file in hex/binary

binUtils -- binary utilities
    objdump -t <programname> -- dump the symbol table for an binary

Linker and Assembler
    Reference: https://www.youtube.com/watch?v=GV10eIuPs9k -- Jacob Sorber
    ld (linux linker)
    as (linux assembler)

GCC Command Options
    gcc -S -o d_helloWorld.asm d_helloWorld.c -- create assembly file with -S option
    gcc -c foo.c -o foo.o -- create an object binary file foo.o from foo.c but don't link

Compilation Toolchain (Process)
    Both gcc and clang compilers use the same optionss listed here
    Preprocessing (using .c files to create .i intermdiate files)
        -E option: preprocess source files
        Includes header files (#include)
        Expands macros (#define)
        Remove comments
        Substitute MACRO text
        gcc -E <program.c> -o <program.i>
    Compilation (using .i files to create .s assembly files)
        -S option: preprocess and compile source files
        Discards unreachable code
        gcc -S <program.i> -o <program.s> to generate assembly in program.s
    Assembly (using .s files to create .o object files)
        -c option: generate object (binary) code from source files
        gcc  -c <program.s> -o <program.o>
    Linking (using .o files to create the executable file)
        No option: links object files into executable
        gcc <program.o> -o <program>
        links libC library
        Creates executable
    Full Chain
        gcc <myprogram.c> creates a.out compiled executable
        gcc <myprogram.c> -o <program> creates a compiled myprogram'

Make
    Makefile comprises recipies
    # -- comment
    # -*- MakeFile -*- is the first line (to disable tab expansion)
    Each recipe comprises two lines
        target: dependencies
        <tab>action
    make without a target argument will only build the first object
        Otherwise, include an all: list to specify all targets to build
    General make pattern target and rule
        %: %.c %.h$
        ^I$(CC) $(CFLAGS) $@ $^$

Format Specifiers
    %i -- integer (base 10) (autodetects base in scanf)
    %d -- signed integer (base 10)
    %lld -- long long integer (base 10)
    %u -- unsigned integer (base 10)
    %o -- octal integer
    %x -- hexadecimal number
    %c -- character
    %s -- string of characters
    %e -- exponential float
    %f -- floating point number
    %% or \% -- print %

Special Format Characters
    \a  -- audible alert
    \b  -- backspace
    \f  -- form feed
    \n  -- newline, or linefeed
    \r  -- carriage return
    \t  -- tab
    \v  -- vertical tab -- drop vertically w/out carriage returning
    \\  -- backslash

CS50 Harvard Class
    Documentation: https://cs50.harvard.edu/college/2020/fall/tutorials/
    https://ide.cs50.io -- IDE
    https://cs50.readthedocs.io/ide/online/ -- IDE Online Docs
    https://www.youtube.com/watch?v=MJUJ4wbFm_A&feature=youtu.be -- An Introduction to GIT by Brian Yu
    IDE Tools
        render50 <sourcefile> -o <outfile.pdf> -- prints the source to pdf
        style50 -- checks the style of c source
        debug50 -- run the debugger after setting a breakpoint
        valgrind -- detect memory leaks ... valgrind ./<executable>

C Language Rules
    Case matters: a != A
    Symbolic Constants: #define PI 3.1416 - compiler directive to define a constant (use upper case)
    Constants: use const prefix to make a variable fixed and unchangeable (i.e immutable)
    volatile: prefix a variable to prevent optimizations on it
    Storage Classes: Automatic, External , Static, Register
    Strings: are immutable if defined as strings but not as arays
    sleep(seconds) -- <unistd.h>
    ternary conditionals: int x = (expr) ? 1 : 2;

Data Types
    Numerical
        Integer (signed and unsigned)
            char 1 byte 8 bit max value 255
            short 2 bytes 16 bit max value 65535
            int 4 bytes 32 bit max value 4294967295
            long 4 bytes 32 bit max value 4294967295
            long long 8 bytes 64 bit 2**64-1
        Fixed width integer types are defined in /usr/include/stdint.h
            int8_t -- 8 bit integer (always 8 bits on all compilers and platforms)
            uint64_t -- unsigned 64 bit integer (always 64 bits on all compilers and platforms)
        Floating point:
            float
            double
    Arrays
    Structures are compound types or collections of values
    Pointers
    Primitive Types (Defined in the language)
        int integer 4 bytes, nnn (decimal) 0xnnn (hexadecimal) 0nnn (octal)
        unsigned int integer 4 bytes not two's complement
        long long int 8 bytes
        unsigned long long int 8 bytes not two's complement
        char character 1 byte (use '.' single quotes)
        char * -- string 4 bytes (use "..." double quotes)
        float real
        double real double precision
    Composite Types (defined by a program)

Strings
    Stings are arrays of chars terminated with a numeric zero ('\0')
    char *b = "This is a string";
    char a[] = "This is a another string";
     
Endian Architecture
    Little Endian - Least signfificant byte assigned to lowest address
    Big Endian - Most signficant buy assined lowest address (reversed byte order)

Operators
    Arithmentic, logical or relational
    % Modulus gives a remainder e.. 5 % 2 is 1
    + - * /
    +=, -=, *= /= e.g. x += 5 is x = x + 5
    true (not 0), false (0)
    && logical AND
    || logical OR
    !  logical NOT (also the Bang operator)
    <, <=, ==, !=, >, >= relational operators

Comments
    // -- single line comment
    /* ... */ -- multi-line or bookend comments
    never leave commented code lines in a program - remove them after testing or put them the code in a command line switch

Variable Declarations and Variable Names
    variable declarations start with a type: int, float, double, struct, array, pointer
    variable names must start with a letter
    remainder can be letters, numbers and underscores
    cannot be keywords
    cannot have spaces

Variable Definitions
    variables are defined after they are declared
    definitions assigne values to variables
    variables should be declared and defined at the same time to avoid unexpected results

Command Line Arguments
    int argc -- argument count
    char *argv[] -- argumet vector (array) of strings where argv[0] is the program name

Files
    fopen(), fclose(), fgetc(), fputc(), fread(), fwrite()
    FILE *fpFile1 = fopen(<sFileName>, <operation>)
    fgetc(<fpFile1>) returns a character or EOF (defined as -1 in /usr/include/stdio.h)
    fputc(<char>, <fpFile2>;
    fread(<pBuffer>, <size>, <quantity>, <fpFile1>;
    fwrite(<pBuffer>, <size>, <quanitty>, <fpFile1>);
    File Operations
        r -- read from a file
        w -- write to a file starting at the beginning
        a -- append to a file

    fgets() -- reads a full string from a file
    fputs() -- writes a full string to a file
    fprintf() -- writes a formatted string to a file
    fseek() -- rewind or forward the curent file position
    ftell() -- get the current file position
    feof() -- tells if EOF is reached
    ferror() -- tells if file error is set

Header Files (located at /usr/include)
    Header files for the standard c library in /usr/include in Linux
    Header files contain declarations (usually)
    <stdio.h> is a header in the C standard library
    'myheader.h' is a header file in the local source directory
    <stdint.h> -- fixed width integer declarations

Preprocessor Commands and Directives
    # indicates a preprocessor directive
        #include <stdio> includes the stdio header file in the code

Preprocessor Macros
    __LINE__  line number integer
    __FILE__  source file name string
    __func__  function name string
    __DATE__  date string
    __TIME__  time string

Structures
    struct <StructName> { type <TypeVar>; type <TypeVar>; ...};
    declaration: struct <StructName> <VarName>
    struct <StructName> *<pVarName> = malloc(sizeof(struct <StructName>));
    pVarName-><StuctMember> = <value>
    typedef struct <StructName>
    typedef struct <StructName> { type <TypeVar>; type <TypeVar>; ...} <StructNameType>;

Abstract Data Structures or Types
    Arrayy
    Linked List
    Stack
    Queue
    Tree
    Graph

Statements and Expressions

Functions
    Blocks of code that perform a specific task
    The main() function is where a C program starts
    Functions are defined as a return type, name, and parameters
    C functions do not support default parameters implicitely
